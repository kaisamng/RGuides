[["index.html", "R Guides Preface Casper Biting Casper Sleeping", " R Guides Mr. Ng &amp; Others Preface This is where guides to R Things will be posted. Casper Biting Casper Sleeping "],["census-data-and-linear-regression.html", "Chapter 1 Census Data and Linear Regression 1.1 Install packages and Census API Key 1.2 Pull data from the Census 1.3 Construct a Linear Model 1.4 Create two data displays.", " Chapter 1 Census Data and Linear Regression 1.1 Install packages and Census API Key Start by loading the required libraries. library(&quot;tidycensus&quot;) ## Warning: package &#39;tidycensus&#39; was built under R version 4.1.2 library(&quot;tidyverse&quot;) library(&quot;reshape&quot;) ## Warning: package &#39;reshape&#39; was built under R version 4.1.2 ## ## Attaching package: &#39;reshape&#39; ## The following object is masked from &#39;package:dplyr&#39;: ## ## rename ## The following objects are masked from &#39;package:tidyr&#39;: ## ## expand, smiths Install your Census API Key into R with this call. census_api_key(&quot;0047417f53c1160f7c485bfee065458498a296c7&quot;, install=TRUE, overwrite=TRUE) 1.2 Pull data from the Census Pull variable data into dataframe. Notice the “geography” is “zcta,” which is the Census Bureau’s equivalent of a ZIP Code. state=“VA” variable helps limit the scope of our data to just VA, otherwise it will download all US. income_with_children &lt;- get_acs(geography=&quot;zcta&quot;, state=&quot;VA&quot;, variables=c(&quot;B19125_002&quot;), year=2019) ## Getting data from the 2015-2019 5-year ACS ## Using FIPS code &#39;51&#39; for state &#39;VA&#39; head(income_with_children) ## # A tibble: 6 × 5 ## GEOID NAME variable estimate moe ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 20105 ZCTA5 20105 B19125_002 186450 7507 ## 2 20106 ZCTA5 20106 B19125_002 128840 1191 ## 3 20109 ZCTA5 20109 B19125_002 59909 11817 ## 4 20110 ZCTA5 20110 B19125_002 82642 8341 ## 5 20111 ZCTA5 20111 B19125_002 89848 11631 ## 6 20112 ZCTA5 20112 B19125_002 165119 11902 income_no_children&lt;- get_acs(geography=&quot;zcta&quot;, state=&quot;VA&quot;, variables=c(&quot;B19125_003&quot;), year=2019) ## Getting data from the 2015-2019 5-year ACS ## Using FIPS code &#39;51&#39; for state &#39;VA&#39; head(income_no_children) ## # A tibble: 6 × 5 ## GEOID NAME variable estimate moe ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 20105 ZCTA5 20105 B19125_003 168315 17112 ## 2 20106 ZCTA5 20106 B19125_003 94231 25421 ## 3 20109 ZCTA5 20109 B19125_003 89498 11660 ## 4 20110 ZCTA5 20110 B19125_003 101915 11204 ## 5 20111 ZCTA5 20111 B19125_003 112373 5781 ## 6 20112 ZCTA5 20112 B19125_003 146406 10038 1.3 Construct a Linear Model Code not provided, because you should know. Construct a scatterplot, construct a linear model, and fit the linear model on top of your scatterplot: x= income_no_children$estimate y= income_with_children$estimate scatter_plot &lt;- plot(x, y, xlab= &quot;No Children&quot;, ylab=&quot;With Children&quot;, main= &quot;Median Household of Income in Virginia, by Zip Code&quot;) reg_line&lt;- lm(income_with_children$estimate ~ income_no_children$estimate) abline(reg_line, col=&quot;red&quot;) summary(reg_line) ## ## Call: ## lm(formula = income_with_children$estimate ~ income_no_children$estimate) ## ## Residuals: ## Min 1Q Median 3Q Max ## -80677 -14460 -1143 13189 223578 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 408.1640 2570.7095 0.159 0.874 ## income_no_children$estimate 0.9832 0.0280 35.110 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 24940 on 636 degrees of freedom ## (258 observations deleted due to missingness) ## Multiple R-squared: 0.6597, Adjusted R-squared: 0.6591 ## F-statistic: 1233 on 1 and 636 DF, p-value: &lt; 2.2e-16 plot(reg_line$residuals, ylab= &quot;Residual&quot;, main= &quot;Residual Plot for Linear Model&quot;) 1.4 Create two data displays. I want to know if households with children tend to have a higher median income than households with no children. Let’s make those two histograms. par(mfrow=c(2, 1)) no_children_histo &lt;- hist(income_no_children$estimate, xlab= &quot;Median Household Income&quot;, ylab= &quot;Count (number of Zip Codes)&quot;, main= &quot;Median Income of Households with No Children in VA, by Zip Code&quot;, col= &quot;sky blue&quot;) no_children_boxplot &lt;- boxplot(income_no_children$estimate, horizontal=TRUE, xlab=&quot;Median Household Income&quot;, main= &quot;Boxplot with 1.5*IQR Outliers&quot; ) text(x=fivenum(income_no_children$estimate), labels=fivenum(income_no_children$estimate), y=1.3) par(mfrow=c(2, 1)) with_children_histo &lt;- hist(income_with_children$estimate, xlab= &quot;Median Income&quot;, ylab= &quot;Count (number of Zip Codes)&quot;, main= &quot;Median Income of Households with Children in VA, by Zip Code&quot;, col= &quot;light green&quot;) with_children_boxplot &lt;- boxplot(income_with_children$estimate, horizontal=TRUE, xlab=&quot;Median Household Income&quot;, main= &quot;Boxplot with 1.5*IQR Outliers&quot; ) text(x=fivenum(income_with_children$estimate), labels=fivenum(income_with_children$estimate), y=1.3) This looks nice, but notice the y-scales are not the same. To make them more comparable, stack the histograms on top of each other using the plot() function. plot(no_children_histo, col= alpha(&quot;sky blue&quot;, 1), xlim= c(0, 300000), xlab= &quot;Median Income&quot;, main= &quot;Median Household Income in VA, by Zip Code&quot;) plot(with_children_histo, col= alpha(&quot;light green&quot;, 0.5), xlim=c(0,300000), add= TRUE) legend(200000, 150, c(&quot;No Children&quot;, &quot;With Children&quot;), fill= c(&quot;sky blue&quot;, &quot;light green&quot;), title= &quot;Zoomer Status&quot;) 1.4.1 How to remove NA’s NA’s show up when either data is not available, or the sample size is so small that the data can be personally identifiable. The Census suppresses such data. Whether you completely remove the NA’s is up to you, and dependent on context. When you create any data visualization, R will automatically exclude NA’s from this analysis. In some contexts, you may want to replace NA’s with a specific number like 0. Talk to your teacher about this before you continue. mean(income_with_children$estimate) ## [1] NA mean(na.omit(income_with_children$estimate)) ## [1] 83832.43 "],["intro-to-two-sample-t-tests.html", "Chapter 2 Intro to Two-Sample T-Tests 2.1 Loading Data. 2.2 Data Wrangling 2.3 Isolate the variables of interest. 2.4 Graph boxplots. 2.5 Run a Two Sample T-Test. 2.6 Graph the t-distribution and test statistic.", " Chapter 2 Intro to Two-Sample T-Tests 2.1 Loading Data. The data that I’ve downloaded is currently in a CSV file. I’m going to use the function File&gt;&gt; Import Dataset &gt;&gt; from base (readr) option. When it first gets loaded, I want certain columns to be treated as numeric vectors. The code is below. library(readr) anime &lt;- read_csv(&quot;resources/data/anime.csv&quot;, col_types = cols(MAL_ID = col_number(), Score = col_number(), Episodes = col_number(), Popularity = col_number(), Members = col_number(), Favorites = col_number(), Watching = col_number(), Completed = col_number(), `On-Hold` = col_number(), Dropped = col_number(),`Plan to Watch` = col_number(), `Score-10` = col_number(), `Score-9` = col_number(), `Score-8` = col_number(), `Score-7` = col_number(), `Score-6` = col_number(), `Score-5` = col_number(), `Score-4` = col_number(), `Score-3` = col_number(), `Score-2` = col_number(),`Score-1` = col_number())) ## Warning: One or more parsing issues, see `problems()` for details 2.2 Data Wrangling Examine any problems with the dataset. Notice that there are a lot of randome problems where we treated a column as a numeric vector, but the actual data value was “Unknown” instead. R will convert the value to “NA,” which is fine with us. problems(anime) ## # A tibble: 16,570 × 5 ## row col expected actual file ## &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 13 8 a number Unknown /Users/kaisamng/Github/resources/data/… ## 2 213 8 a number Unknown /Users/kaisamng/Github/resources/data/… ## 3 873 8 a number Unknown /Users/kaisamng/Github/resources/data/… ## 4 1095 8 a number Unknown /Users/kaisamng/Github/resources/data/… ## 5 1267 33 a number Unknown /Users/kaisamng/Github/resources/data/… ## 6 1406 3 a number Unknown /Users/kaisamng/Github/resources/data/… ## 7 1506 3 a number Unknown /Users/kaisamng/Github/resources/data/… ## 8 1580 3 a number Unknown /Users/kaisamng/Github/resources/data/… ## 9 1580 34 a number Unknown /Users/kaisamng/Github/resources/data/… ## 10 1701 3 a number Unknown /Users/kaisamng/Github/resources/data/… ## # … with 16,560 more rows View(anime) names(anime) ## [1] &quot;MAL_ID&quot; &quot;Name&quot; &quot;Score&quot; &quot;Genders&quot; ## [5] &quot;English name&quot; &quot;Japanese name&quot; &quot;Type&quot; &quot;Episodes&quot; ## [9] &quot;Aired&quot; &quot;Premiered&quot; &quot;Producers&quot; &quot;Licensors&quot; ## [13] &quot;Studios&quot; &quot;Source&quot; &quot;Duration&quot; &quot;Rating&quot; ## [17] &quot;Ranked&quot; &quot;Popularity&quot; &quot;Members&quot; &quot;Favorites&quot; ## [21] &quot;Watching&quot; &quot;Completed&quot; &quot;On-Hold&quot; &quot;Dropped&quot; ## [25] &quot;Plan to Watch&quot; &quot;Score-10&quot; &quot;Score-9&quot; &quot;Score-8&quot; ## [29] &quot;Score-7&quot; &quot;Score-6&quot; &quot;Score-5&quot; &quot;Score-4&quot; ## [33] &quot;Score-3&quot; &quot;Score-2&quot; &quot;Score-1&quot; If you look, for some reason the “Genres” column is named “Genders.” Let’s rename to “Genres.” names(anime)[names(anime)==&quot;Genders&quot;] &lt;- &quot;Genres&quot; Verify that the column names are now correct. ## [1] &quot;MAL_ID&quot; &quot;Name&quot; &quot;Score&quot; &quot;Genres&quot; ## [5] &quot;English name&quot; &quot;Japanese name&quot; &quot;Type&quot; &quot;Episodes&quot; ## [9] &quot;Aired&quot; &quot;Premiered&quot; &quot;Producers&quot; &quot;Licensors&quot; ## [13] &quot;Studios&quot; &quot;Source&quot; &quot;Duration&quot; &quot;Rating&quot; ## [17] &quot;Ranked&quot; &quot;Popularity&quot; &quot;Members&quot; &quot;Favorites&quot; ## [21] &quot;Watching&quot; &quot;Completed&quot; &quot;On-Hold&quot; &quot;Dropped&quot; ## [25] &quot;Plan to Watch&quot; &quot;Score-10&quot; &quot;Score-9&quot; &quot;Score-8&quot; ## [29] &quot;Score-7&quot; &quot;Score-6&quot; &quot;Score-5&quot; &quot;Score-4&quot; ## [33] &quot;Score-3&quot; &quot;Score-2&quot; &quot;Score-1&quot; Save the new file as a R dataframe. save(anime, file=&quot;resources/data/anime.RData&quot;) 2.3 Isolate the variables of interest. This uses subsets all rows within the anime dataframe based on the condition in the brackets, and then saves it into a new dataframe called action_anime. The condition is satifised with the “grep” function, which will search for any character string and return “TRUE” if it contains “Action” within the column anime$Genres. action_anime&lt;- anime[grep(&quot;Action&quot;, anime$Genres), ] View the dataframe. How many animes do you recognize? View(action_anime) head(action_anime) ## # A tibble: 6 × 35 ## MAL_ID Name Score Genres `English name` `Japanese name` Type ## &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 1 Cowboy Bebop 8.78 Actio… Cowboy Bebop カウボーイビバ… TV ## 2 5 Cowboy Bebo… 8.39 Actio… Cowboy Bebop:… カウボーイビバ… Movie ## 3 6 Trigun 8.24 Actio… Trigun トライガン TV ## 4 7 Witch Hunte… 7.27 Actio… Witch Hunter … Witch Hunter R… TV ## 5 15 Eyeshield 21 7.95 Actio… Unknown アイシールド21 TV ## 6 18 Initial D F… 8.15 Actio… Unknown 頭文字〈イニシ… TV ## # … with 28 more variables: Episodes &lt;dbl&gt;, Aired &lt;chr&gt;, ## # Premiered &lt;chr&gt;, Producers &lt;chr&gt;, Licensors &lt;chr&gt;, Studios &lt;chr&gt;, ## # Source &lt;chr&gt;, Duration &lt;chr&gt;, Rating &lt;chr&gt;, Ranked &lt;chr&gt;, ## # Popularity &lt;dbl&gt;, Members &lt;dbl&gt;, Favorites &lt;dbl&gt;, Watching &lt;dbl&gt;, ## # Completed &lt;dbl&gt;, `On-Hold` &lt;dbl&gt;, Dropped &lt;dbl&gt;, ## # `Plan to Watch` &lt;dbl&gt;, `Score-10` &lt;dbl&gt;, `Score-9` &lt;dbl&gt;, ## # `Score-8` &lt;dbl&gt;, `Score-7` &lt;dbl&gt;, `Score-6` &lt;dbl&gt;, … We’re interested in how people rated these animes. Let’s calculate the score column for each. mean(action_anime$Score, na.rm=TRUE) ## [1] 6.750752 mean(anime$Score, na.rm=TRUE) ## [1] 6.509999 Interesting! Let’s isolate the score columns from both dataframes and store them as separate vectors. anime_score&lt;- anime$Score action_anime_score &lt;- action_anime$Score 2.4 Graph boxplots. It looks like the average rating for action animes is indeed higher than the average rating for all animes. But by how much? To answer this question, let’s first graph a boxplot. boxplot(anime_score, action_anime_score, ylim=c(0,10), main= &quot;Boxplot comparison of All Anime vs. Action Anime&quot;, xlab= &quot;Rating&quot;, names=c(&quot;Anime&quot;, &quot;Action Anime&quot;), col=c(&quot;Red&quot;, &quot;Green&quot;), horizontal=TRUE) 2.5 Run a Two Sample T-Test. Based on the boxplots, it looks like there’s a difference. Action animes appear to be rated higher than the rest. That means: Our null hypothesis is that there is no difference between the two averages, so u1 - u2 =0. Our alternative hypothesis is that there is a difference between two averages, specifically that the average rating for all animes is lower than the average rating for action animes. Set the alternative hypothesis to be that the true average score of all animes is LOWER than the true average score for action animes. action_t_test &lt;- t.test(anime_score, action_anime_score, alternative= &quot;less&quot;, var.equal=TRUE) View the results. ## ## Two Sample t-test ## ## data: anime_score and action_anime_score ## t = -14.009, df = 15731, p-value &lt; 2.2e-16 ## alternative hypothesis: true difference in means is less than 0 ## 95 percent confidence interval: ## -Inf -0.2124838 ## sample estimates: ## mean of x mean of y ## 6.509999 6.750752 Wow! There’s a serious difference. Look at the p-value for that. Now we need to graph this. 2.6 Graph the t-distribution and test statistic. Let’s start by: storing the degrees of freedom in a variable called action_t_test. creating an x-axis and store it as a variable called t_d_st_x_axis. This is the equivalent of drawing tick marks everywhere on a graph, but a ton of tick marks. We’re making a huge sequence 10^4 numbers long (so 10000 numbers) between -15.5 and 15.5. This helps fit in my massive test statistic of -14.34 action_t_test_df&lt;- length(anime_score) +length(action_anime_score) -2 #Recall how to calculate degrees of freedom. t_dist_x_axis&lt;- seq(-15.5, 15.5, length= 10^4) Finally, plot. Notice here that for plot(): the x-value is t_dist_x_axis the y-value is dt(t_dist_x_axis, df=action_t_test_df). This generates a t-value for every value in t_dist_x_axis, so basically f(x), with the degrees of greedom we set earlier. plot(t_dist_x_axis, dt(t_dist_x_axis, df=action_t_test_df), type=&#39;l&#39;, xlab=&#39;t&#39;, ylab=&#39;&#39;, main=&quot;The most ridiculous t-test graph ever&quot;, sub=&quot;Look at that test statistic in the dotted line. Just look.&quot;) I want to show how ridiculous this is. We’re going to store the critical t* value of 0.01 in it’s own variable, and plot that with red lines. crit_t_value_0.01&lt;- qt(0.01, df=action_t_test_df) abline(v=crit_t_value_0.01, col=&#39;red&#39;) abline(v=-crit_t_value_0.01, col=&#39;red&#39;) Finally, plot the test statistic, using a dotted line. abline(v=action_t_test$statistic, lty=2) "],["intro-to-anova-analysis.html", "Chapter 3 Intro to ANOVA Analysis 3.1 Comparing Several means: Hummingbirds and Tropical Flowers 3.2 The F Test 3.3 Check for Conditions 3.4 The F Distribution 3.5 Conducting the one-way ANOVA 3.6 Conclude Pt. 2: Creating Tukey Post-Hoc Pairwise Comparisons", " Chapter 3 Intro to ANOVA Analysis 3.1 Comparing Several means: Hummingbirds and Tropical Flowers Ethan Temeles and W. John Kress of Amherst College studied the relationship between varieties of the tropical flower Heliconia on the island of Dominica and the different species of hummingbirds that pollinate the flowers. Over time, the researchers believe, the lengths of the flowers and the forms of the hummingbirds’ beaks have evolved to match each other. If that is true, flower varieties pollinated by different hummingbird species should have distinct distributions of length. The table below gives length measurements (in millimeters) for random samples of three varieties of Heliconia, each pollinated by a different species of humming- bird. Do the three varieties display distinct distributions of length? In particular, do the mean lengths of their flowers differ? library(ggplot2) library(tidyverse) library(ggthemes) For the flower data, I made a CSV file from the textbook data, and then imported it into R. Flowers&lt;- read_csv(&quot;resources/data/Flowers.csv&quot;) ## Rows: 23 Columns: 3 ## ── Column specification ─────────────────────────────────────────────── ## Delimiter: &quot;,&quot; ## dbl (3): H. bihai, H. caribea red, H. caribea yellow ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. head(Flowers) ## # A tibble: 6 × 3 ## `H. bihai` `H. caribea red` `H. caribea yellow` ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 47.1 41.9 36.8 ## 2 46.8 42.0 37.0 ## 3 46.8 41.9 36.5 ## 4 47.1 43.1 36.1 ## 5 46.7 41.5 36.0 ## 6 47.4 41.7 35.4 In order for R to process the data, I need to convert the data from “wide” format to “long” format. I also need to let R know that each species should be treated as a “factor,” which means that it is a type of categorical variable (so I can sort out data based on Species) later on. Flowers_long&lt;- gather(Flowers, &quot;Species&quot;, &quot;Length&quot;, factor_key= TRUE) Flowers_long ## # A tibble: 69 × 2 ## Species Length ## &lt;fct&gt; &lt;dbl&gt; ## 1 H. bihai 47.1 ## 2 H. bihai 46.8 ## 3 H. bihai 46.8 ## 4 H. bihai 47.1 ## 5 H. bihai 46.7 ## 6 H. bihai 47.4 ## 7 H. bihai 46.4 ## 8 H. bihai 46.6 ## 9 H. bihai 48.1 ## 10 H. bihai 48.3 ## # … with 59 more rows Let’s follow the strategy we learned way back in Unit 1: use graphs and numerical summaries to compare the three distributions of flower length. Here are the summary statistics we will use in further analysis: mean_and_sd&lt;- Flowers_long %&gt;% group_by(Species) %&gt;% summarize(mean=mean(Length, na.rm=T), sd=sd(Length, na.rm=T)) head(mean_and_sd) ## # A tibble: 3 × 3 ## Species mean sd ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 H. bihai 47.6 1.21 ## 2 H. caribea red 39.7 1.80 ## 3 H. caribea yellow 36.2 0.975 What do we see? The three varieties differ so much in flower length that there is little overlap among them. In particular, the flowers of bihai are longer than either red or yellow. The mean lengths are 47.6 mm for H. bihai, 39.7 mm for H. caribaea red, and 36.2 mm for H. caribaea yellow. Are these observed differences in sample means statistically significant? We must develop a test for comparing more than two population means. 3.2 The F Test We want to test the null hypothesis that there are no differences among the mean lengths for the three populations of flowers: H0:μ1 =μ2 =μ3 The alternative hypothesis is that there is some difference. That is, not all three population means are equal: Ha : not all of μ1, μ2, and μ3 are equal The alternative hypothesis is no longer one-sided or two-sided. It is “many-sided” because it allows any relationship other than “all three equal.” For example, Ha includes the case in which m2 = m3 but m1 has a different value. When the conditions for inference are met, the appropriate significance test for comparing means is the analysis of variance F test. Analysis of variance is usually abbreviated as ANOVA. 3.3 Check for Conditions Now that we have stated our Null and Alternative Hypotheses, we can check for conditions: Random: Researchers took separate random samples of 16 bihaii, 23 red, and 15 Heliconia flowers. Normal: We entered the data into R and made side by side boxplots. Although the distributions for the bihai and red varieties show some right-skewness, we don’t see nay strong skewness or outliers that would prevent the use of one-way ANOVA. ggplot(Flowers_long, aes(x=Length, y=Species, fill=Species))+ geom_boxplot(color=&quot;black&quot;)+ labs(title= &quot;Flower Lengths from Textbook&quot;)+theme_gdocs()+ geom_jitter(width=0.1) ## Warning: Removed 15 rows containing non-finite values (stat_boxplot). ## Warning: Removed 15 rows containing missing values (geom_point). Independent: Researchers took independent samples of bihai, red, and yellow Heliconia. because sampling without replacement was used, there must be at least 10(16) = 160 bihai, 10(23) = 230 red, and 10(15) = 150 yellow flowers. This is pretty safe to assume. Same SD: In a one-way ANOVA, you must check whether the largest sample SD divided by the smallest SD has a ratio less than 2. Our sample standard deviations are: ## # A tibble: 3 × 3 ## Species mean sd ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 H. bihai 47.6 1.21 ## 2 H. caribea red 39.7 1.80 ## 3 H. caribea yellow 36.2 0.975 These standard deviations satisfy our rule of thumb that (largest SD)/ (smallest SD) is less than 2, so we can proceed. Since we have satifised all 3 conditions, we can safely use ANOVA to compare the mean lengths of the three populations. 3.4 The F Distribution The variances for three populations is naturally larger than the variance of two populations. Just like how two populations naturally have a larger variance, and thus requires the t-distribution (which has more “area” under the tails), we need to use a different distribution that takes into account this larger variance (which has even more “area” under the tails. This distribution is called the F-Distribution. The *F* distributions are a family of right-skewed distributions that take only values greater than 0. Above are some possible shapes. A specific F distribution is determined by the degrees of freedom of the numerator and denominator of the F statistic. When describing an F distribution, always give the numerator degrees of freedom first. Our notation will be F (df1, df2) for the F distribution with df1 degrees of freedom in the numerator and df2 degrees of freedom in the denominator. Interchanging the degrees of freedom changes the distribution, so the order is important. 3.4.1 Finding the Degrees of Freedom for F In the two earlier examples, we compared the mean lengths for three varieties of flowers,so k=3.The three sample sizes are n1 =16,n2 =23,and n3 =15. The total number of observations is therefore N = 16 + 23 + 15 = 54. The ANOVA F test has numerator degrees of freedom k - 1 = 3 - 1 = 2 and denominator degrees of freedom N - k = 54 - 3 = 51 3.4.2 Understanding the F Statistic Just like we had a test statistic in a two-sample t-test, we need something similar to tell us the distance the statistic is away from our Null Hypothesis. This distance is called the F Statistic. The F Statistic is calculated by doing: \\[ F= \\frac{\\text{variation among the sample means}}{\\text{variation among individuals within the same sample}} \\] Specifically, the variation is calculated by dividing the Mean Square for Groups by the Mean Square for Error. The statistic is reproduced below, but you should know that you’d never have to do this by hand– R will do it all for you. 3.4.3 Calculate the F Statistic Just like we had a test statistic in a two-sample t-test, we need something similar to tell us the distance the statistic is away from our Null Hypothesis. This distance is called the F Statistic. The F Statistic is calculated by doing: 3.5 Conducting the one-way ANOVA Of course, the previous pages gave you a very brief background of a one-way ANOVA test. It turns out that conducting the test itself in R is very easy– R even calculates the degrees of freedom for you. Flowers_long &lt;- na.omit(Flowers_long) anova.test &lt;- aov(Length ~ Species, data=na.omit(Flowers_long)) summary(anova.test) ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## Species 2 1082.9 541.4 259.1 &lt;2e-16 *** ## Residuals 51 106.6 2.1 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Looking at the P Value for Species, the one-way ANOVA Test tells us that there is a very significant difference between the average lengths of the 3 species. Thus, we reject the Null Hypothesis, and in favor of the Alternative Hypothesis that ther is a significant difference between the three species. 3.6 Conclude Pt. 2: Creating Tukey Post-Hoc Pairwise Comparisons Knowing that there is a difference is often not enough– what if you want to know exactly which means were significantly different from each other? In this case, we’d have to conduct a two-sample t-test for every possible two means that we have, which could be irritating, especially if we are comparing many means with each other. This is where a Tukey Post-Hoc Pairwise Comparison comes into play. The name sounds scary, but the following is true: A guy named Tukey created this method. “Post-Hoc” means “after the fact” in Latin. After knowing the fact that there is a difference among all three means from a one-way ANOVA, you can perform this procedure. “Pairwise Comparision” means you compare two things with each other. To perform the pairwise comparison, run the TukeyHSD() command on your anova.test model. TukeyHSD(anova.test, conf.level=.95) ## Tukey multiple comparisons of means ## 95% family-wise confidence level ## ## Fit: aov(formula = Length ~ Species, data = na.omit(Flowers_long)) ## ## $Species ## diff lwr upr ## H. caribea red-H. bihai -7.886196 -9.022163 -6.750229 ## H. caribea yellow-H. bihai -11.417500 -12.671601 -10.163399 ## H. caribea yellow-H. caribea red -3.531304 -4.689387 -2.373222 ## p adj ## H. caribea red-H. bihai 0 ## H. caribea yellow-H. bihai 0 ## H. caribea yellow-H. caribea red 0 You can also plot these results, as shown below: #Margins will spill over, so you need to adjust these par(mar=c(4, 13, 4, 4)+0.1) plot(TukeyHSD(anova.test, conflevel=.95), las=1, col=&quot;blue&quot;) Notice that the x-axis doesn’t even include 0– our pairwise comparisons illustrate that all of the species are significantly different from each other in terms of mean length. Notice that none of the confidence intervals include 0 (what does that mean?). "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
